Prochaines étapes :

-Ecrire le controller et pouvoir placer des pièces dans
    la grille à tour de role (sans fin).
-Pouvoir vérifier la condition de victoire (calculate outcome)
-Jeu fonctionnel avec IA random
-Interface simple en SFML
-Intégrer l'interface SFML à la classe View


On va hardcodé la dim de Quixo à 5 car ca fait pas de sens de pouvoir
mettre plus. Comme ca on pourra faire un constructeur sans avoir à
passer la dim et c'est mieux.



Continuer de s'inspirer de https://github.com/olbrew/space-invaders/



*Interface simple en SFML
    -> Dessiner une grille de 5x5 cases (entités individuelles).
    -> Event handling d'un clic sur une case.




Les entités ne devraient vraiment pas avoir de méthodes.
Parce que côté IhmCli on est sensé avoir uniquement les
entités (données), inutile d'avoir accès à des méthodes
de vérification, etc..
C'est plutôt le modèle (qui a lui même accès aux entités)
qui devrait s'en charger exclusivement.
Tile& operator[](unsigned i) devrait être privée.
std::string calculateOutcome()const et void clear() devraient
être dans Model.
void print()const devrait être une surcharge de l'opérateur '<<'
pour pouvoir cout l'entité directement.