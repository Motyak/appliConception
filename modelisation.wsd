@startuml modelisation

interface Ai 
{
    {abstract} +void nextMove()
}

note left of Ai : Strategy pattern
Ai 	<|-- Random
class Random
{
    +void nextMove()
}

note left of MinMax : <b>nextMove</b> is a \ntemplate method
Ai 	<|-- MinMax
class MinMax
{
    +void nextMove()
    -void genTree()
    -void evalNodes()
}

MinMax 	<|-- MinMaxMulti
class MinMaxMulti
{
    -void genTree()
    -void evalNodes()
}

MinMaxMulti *-- ThreadPool
class ThreadPool
{

}

ThreadPool *-- "1..*" SFMLThread
class SFMLThread

class AnimationFactory
{
    +get..(..) : ..
}

class GraphicFactory
{
    +get..(..) : ..
}

class Model
{

}

note left of View : event handlers call\nController use cases
View *-- GraphicFactory
View *-- AnimationFactory
class View
{
    +void setElem1(..)
    +void evtHandler1(..)
    +...()
}

note left of Controller : <b>updateView</b> updates\nView based on Model
Controller *-- Model
Controller *--> View
Controller *-- Ai
class Controller
{
    +void updateView()
    +void UC1()
    +...()
}

Launcher *-- Controller
class Launcher
{
    +void launch()
}
@enduml