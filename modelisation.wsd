@startuml Modelisation

'''''''''''''''''''''''''''''''''''''''''''''''
' IHM start
'''''''''''''''''''''''''''''''''''''''''''''''
abstract Ihm
{
    #Controller ctrl
    {abstract}+run()
    {abstract}+display()
    {abstract}+setView(grid : ModelBoard)
    {abstract}+setView(turn : ModelPlayer)
    {abstract}+announceWinner(winner : ModelPlayer)
}

note bottom of IhmSfml : easily replacable
Ihm <|-- IhmSfml
class IhmSfml
{
    -<graphical elements>
    -pause : bool
    -storage : ModelBoard
    -selectedTile : int
    -handleClickDuringPause() : void
    -handleClickIn(sf::Event evt) : void
    -handleClickOut() : void
    -exitPause() : void
    -insideGrid(unsigned x, unsigned y) : bool
    +run()
    +display()
    +setView(grid : ModelBoard)
    +setView(turn : ModelPlayer)
    +announceWinner(winner : ModelPlayer)
}

Ihm <|-- IhmCli
class IhmCli
{
    -<his own model>
    -clear() : void
    -pause(s : unsigned) : void
    -prompt() : string
    +run()
    +display()
    +setView(grid : ModelBoard)
    +setView(turn : ModelPlayer)
    +announceWinner(winner : ModelPlayer)
}
'''''''''''''''''''''''''''''''''''''''''''''''
' IHM end
'''''''''''''''''''''''''''''''''''''''''''''''



'''''''''''''''''''''''''''''''''''''''''''''''
' AI start
'''''''''''''''''''''''''''''''''''''''''''''''
note left of Ai : Strategy pattern
ModelMove <-- Ai: use
interface Ai
{
    {abstract} +nextMove(board : ModelBoard, player : ModelPlayer) : ModelMove
}

Ai 	<|-- Random
class Random
{
    - generateMove() : ModelMove
    + nextMove(..) : ModelMove
}

note left of MinMax : <b>nextMove</b> is a \ntemplate method
Ai 	<|-- MinMax
class MinMax
{
    + nextMove(..)
    - genTree(..)
    - evalNode(node : ModelBoard)
    - evalNodeRec(node : ModelBoard, depth : int)
}

MinMax 	<|-- MinMaxMulti
class MinMaxMulti
{
    - genTree(..)
    - evalNode(node : ModelBoard)
    - evalNodeRec(node : ModelBoard, depth : int)
}

MinMaxMulti *-- ThreadPool
class ThreadPool
{

}
'''''''''''''''''''''''''''''''''''''''''''''''
' AI end
'''''''''''''''''''''''''''''''''''''''''''''''





'''''''''''''''''''''''''''''''''''''''''''''''
' MODEL start
'''''''''''''''''''''''''''''''''''''''''''''''
Controller *-- Model
Controller *--> Ihm
Controller *-- Ai
class Controller
{
    - playMove(unsigned from, unsigned to) : void
    - aiPlays() : void
    - checkOnWin() : bool
    + Controller(Ihm ihm)
    + updateView() : void
    + submitMove(unsigned from, unsigned to) : bool
    + renewGame() : void
    + incrementTurn() : void
}

Model *-- ModelBoard
Model *-- ModelPlayer
class Model
{
    -grid : ModelBoard
    -turn : ModelPlayer
    -positionedOnEdge(unsigned i) : bool
    -areOpposite(unsigned from, unsigned to) : bool
    +validMove(unsigned from, unsigned to) : bool
    +playMove(unsigned from, unsigned to) : void
    +incrementTurn() : void
    +hasAWinner() : bool
    +clearBoard() : void
    
}

ModelBoard *-- "25" ModelBoardTile
class ModelBoard
{
    +<stucture access>()
}

enum ModelBoardTile
{
    +EMPTY = 0
    +X = 1
    +O = -1
}

enum ModelPlayer
{
    +X = 1
    +O = -1
}

class ModelMove
{
    +from : unsigned
    +to : unsigned
}
'''''''''''''''''''''''''''''''''''''''''''''''
' MODEL end
'''''''''''''''''''''''''''''''''''''''''''''''

@enduml